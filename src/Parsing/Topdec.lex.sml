functor TopdecLex(structure Tokens: Topdec_TOKENS
			   structure LexUtils: LEX_UTILS
			     where type pos = LexBasics.pos
			     where type SourceReader = LexBasics.SourceReader
			     sharing type LexUtils.svalue = Tokens.svalue
			     sharing type LexUtils.token = Tokens.token
			  )
	=
   struct
    structure UserDeclarations =
      struct
(* Lexical specification for Standard ML.		NICK, August 1990. *)

  open Tokens
  type pos = LexBasics.pos
  type arg = LexUtils.LexArgument
  type lexresult = (svalue, LexBasics.pos) token
  fun eof _ = Tokens.EOF(LexBasics.DUMMY, LexBasics.DUMMY)
  val lParen = "(" and rParen = ")"

  fun pad str = if size str mod 18 <> 0 then pad(str ^ " ") else str
  fun shifting x = () (*BasicIO.print(pad("S." ^ x ^ " "))*)

(* Something which returns a (pos * pos) for a token. This is what ML-Yacc
   works with, and we use it in the productions below. *)

  fun ofLength(arg, yypos, yytext) =
    let
      val yypos = yypos - 2
	(* If somebody can tell be why the yypos seems to be permanently
	   two characters ahead of where it should be, I'd be interested... *)

      val LexBasics.SOURCE_READER{positionFn, ...} =
	LexUtils.sourceReaderOf arg

      val lPos = positionFn yypos
      val rPos = positionFn(yypos + size yytext)
    in
      (lPos, rPos)
    end

  fun token0(tokFn, arg, yypos, yytext) =
        tokFn(ofLength(arg, yypos, yytext))

  fun token1(tokFn, value, arg, yypos, yytext) =
	let
	  val (l, r) = ofLength(arg, yypos, yytext)
	in
	  tokFn(value, l, r)
	end

  fun token_id (yytext, arg, yypos) =
    token1(LexUtils.identifier, yytext,
	   arg, yypos, yytext)

  fun token_qualid (yytext,arg,yypos) =
    token1(if LexUtils.isQualStar yytext
	     then (shifting "QUAL_STAR";
		   QUAL_STAR
		   )
	   else (shifting "QUAL_ID";
		 QUAL_ID
		 ),
	     LexUtils.asQualId yytext,
	     arg, yypos, yytext
	     )

  fun positionOfStream(arg, yypos) =
    let
      val LexBasics.SOURCE_READER{positionFn, ...} =
	LexUtils.sourceReaderOf arg
    in
      positionFn yypos
    end

  fun error(arg, yypos, msg) =
    raise LexBasics.LEXICAL_ERROR(positionOfStream(arg, yypos), msg)

 (* addAsciiChar can fail, so we need to generate position info for it. *)
  fun addAsciiChar(arg, yypos, yytext) =
    LexUtils.addAsciiChar (positionOfStream(arg, yypos), yytext) arg

 (*addUnicodeChar can fail, so we need to generate position info for it.*)
  fun addUnicodeChar (arg, yypos, yytext) =
    LexUtils.addUnicodeChar (positionOfStream (arg, yypos), yytext) arg

  fun has_quote s =
    let fun loop i = ((String.sub(s,i) = #"`") orelse loop (i+1))
      handle _ => false
    in loop 0
    end

  fun incr r = r := !r + 1
  fun decr r = r := !r - 1

  val quotation = Flags.is_on0 "quotation"
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\011\011\011\011\011\011\011\011\011\074\075\011\074\074\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\074\036\073\036\036\036\036\071\069\068\036\036\067\036\064\036\
\\059\057\057\057\057\057\057\057\057\057\036\056\036\036\036\036\
\\036\038\038\038\038\038\038\038\038\038\038\038\038\038\038\038\
\\038\038\038\038\038\038\038\038\038\038\038\055\036\054\036\042\
\\040\038\038\038\038\038\038\038\038\038\038\038\038\038\038\038\
\\038\038\038\038\038\038\038\038\038\038\038\037\036\035\012\011\
\\011"
),
 (3, 
"\076\076\076\076\076\076\076\076\076\076\101\076\076\076\076\076\
\\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\
\\076\076\100\076\076\076\076\076\076\076\076\076\076\076\076\076\
\\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\
\\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\
\\076\076\076\076\076\076\076\076\076\076\076\076\078\076\076\076\
\\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\
\\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\
\\076"
),
 (5, 
"\102\102\102\102\102\102\102\102\102\102\107\102\102\102\102\102\
\\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102\102\102\102\102\102\102\102\105\102\103\102\102\102\102\102\
\\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102"
),
 (7, 
"\108\108\108\108\108\108\108\108\108\108\113\108\108\108\108\108\
\\108\108\108\108\108\108\108\108\108\108\108\108\108\108\108\108\
\\108\108\108\108\108\108\108\108\108\108\108\108\108\108\108\108\
\\108\108\108\108\108\108\108\108\108\108\108\108\108\108\108\108\
\\108\108\108\108\108\108\108\108\108\108\108\108\108\108\108\108\
\\108\108\108\108\108\108\108\108\108\108\108\108\108\108\110\108\
\\109\108\108\108\108\108\108\108\108\108\108\108\108\108\108\108\
\\108\108\108\108\108\108\108\108\108\108\108\108\108\108\108\108\
\\108"
),
 (9, 
"\114\114\114\114\114\114\114\114\114\118\119\114\118\118\114\114\
\\114\114\114\114\114\114\114\114\114\114\114\114\114\114\114\114\
\\118\114\114\114\114\114\114\114\117\114\114\114\114\114\114\114\
\\114\114\114\114\114\114\114\114\114\114\114\114\114\114\114\114\
\\114\115\115\115\115\115\115\115\115\115\115\115\115\115\115\115\
\\115\115\115\115\115\115\115\115\115\115\115\114\114\114\114\114\
\\114\115\115\115\115\115\115\115\115\115\115\115\115\115\115\115\
\\115\115\115\115\115\115\115\115\115\115\115\114\114\114\114\114\
\\114"
),
 (12, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\013\000\013\013\013\013\000\000\000\013\013\000\013\018\013\
\\032\021\021\021\021\021\021\021\021\021\013\000\013\013\013\013\
\\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\013\000\013\000\
\\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\013\000\013\000\
\\000"
),
 (13, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\013\000\013\013\013\013\000\000\000\013\013\000\013\018\013\
\\000\000\000\000\000\000\000\000\000\000\013\000\013\013\013\013\
\\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\013\000\013\000\
\\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\013\000\013\000\
\\000"
),
 (14, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\014\000\014\014\014\014\000\000\000\014\014\000\014\015\014\
\\000\000\000\000\000\000\000\000\000\000\014\000\014\014\014\014\
\\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\014\000\014\000\
\\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\014\000\014\000\
\\000"
),
 (15, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\016\000\016\016\016\016\000\000\000\016\016\000\016\000\016\
\\000\000\000\000\000\000\000\000\000\000\016\000\016\016\016\016\
\\016\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\
\\017\017\017\017\017\017\017\017\017\017\017\000\016\000\016\000\
\\016\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\
\\017\017\017\017\017\017\017\017\017\017\017\000\016\000\016\000\
\\000"
),
 (16, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\016\000\016\016\016\016\000\000\000\016\016\000\016\015\016\
\\000\000\000\000\000\000\000\000\000\000\016\000\016\016\016\016\
\\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\016\000\016\000\
\\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\016\000\016\000\
\\000"
),
 (17, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\017\000\000\000\000\000\000\015\000\
\\017\017\017\017\017\017\017\017\017\017\000\000\000\000\000\000\
\\000\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\
\\017\017\017\017\017\017\017\017\017\017\017\000\000\000\000\017\
\\000\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\
\\017\017\017\017\017\017\017\017\017\017\017\000\000\000\000\000\
\\000"
),
 (18, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\019\000\019\019\019\019\000\000\000\019\019\000\019\000\019\
\\000\000\000\000\000\000\000\000\000\000\019\000\019\019\019\019\
\\019\020\020\020\020\020\020\020\020\020\020\020\020\020\020\020\
\\020\020\020\020\020\020\020\020\020\020\020\000\019\000\019\000\
\\016\020\020\020\020\020\020\020\020\020\020\020\020\020\020\020\
\\020\020\020\020\020\020\020\020\020\020\020\000\019\000\019\000\
\\000"
),
 (19, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\019\000\019\019\019\019\000\000\000\019\019\000\019\018\019\
\\000\000\000\000\000\000\000\000\000\000\019\000\019\019\019\019\
\\019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\019\000\019\000\
\\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\019\000\019\000\
\\000"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\020\000\000\000\000\000\000\018\000\
\\020\020\020\020\020\020\020\020\020\020\000\000\000\000\000\000\
\\000\020\020\020\020\020\020\020\020\020\020\020\020\020\020\020\
\\020\020\020\020\020\020\020\020\020\020\020\000\000\000\000\020\
\\000\020\020\020\020\020\020\020\020\020\020\020\020\020\020\020\
\\020\020\020\020\020\020\020\020\020\020\020\000\000\000\000\000\
\\000"
),
 (21, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
\\021\021\021\021\021\021\021\021\021\021\000\000\000\000\000\000\
\\000\000\000\000\000\022\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\022\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (22, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\025\025\025\025\025\025\025\025\025\025\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\000\
\\000"
),
 (23, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\024\024\024\024\024\024\024\024\024\024\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\025\025\025\025\025\025\025\025\025\025\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (26, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\027\027\027\027\027\027\027\027\027\027\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (27, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\027\027\027\027\027\027\027\027\027\027\000\000\000\000\000\000\
\\000\000\000\000\000\028\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\028\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (28, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\031\031\031\031\031\031\031\031\031\031\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\029\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\030\030\030\030\030\030\030\030\030\030\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (31, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\031\031\031\031\031\031\031\031\031\031\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
\\021\021\021\021\021\021\021\021\021\021\000\000\000\000\000\000\
\\000\000\000\000\000\022\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\022\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\033\000\000\000\000\000\000\000\
\\000"
),
 (33, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\034\034\034\034\034\034\034\034\034\034\000\000\000\000\000\000\
\\000\034\034\034\034\034\034\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\034\034\034\034\034\034\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (38, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\039\000\000\000\000\000\000\018\000\
\\039\039\039\039\039\039\039\039\039\039\000\000\000\000\000\000\
\\000\039\039\039\039\039\039\039\039\039\039\039\039\039\039\039\
\\039\039\039\039\039\039\039\039\039\039\039\000\000\000\000\039\
\\000\039\039\039\039\039\039\039\039\039\039\039\039\039\039\039\
\\039\039\039\039\039\039\039\039\039\039\039\000\000\000\000\000\
\\000"
),
 (40, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\014\000\014\014\014\014\041\000\000\014\014\000\014\015\014\
\\041\041\041\041\041\041\041\041\041\041\014\000\014\014\014\014\
\\014\041\041\041\041\041\041\041\041\041\041\041\041\041\041\041\
\\041\041\041\041\041\041\041\041\041\041\041\000\014\000\014\041\
\\014\041\041\041\041\041\041\041\041\041\041\041\041\041\041\041\
\\041\041\041\041\041\041\041\041\041\041\041\000\014\000\014\000\
\\000"
),
 (41, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\041\000\000\000\000\000\000\000\000\
\\041\041\041\041\041\041\041\041\041\041\000\000\000\000\000\000\
\\000\041\041\041\041\041\041\041\041\041\041\041\041\041\041\041\
\\041\041\041\041\041\041\041\041\041\041\041\000\000\000\000\041\
\\000\041\041\041\041\041\041\041\041\041\041\041\041\041\041\041\
\\041\041\041\041\041\041\041\041\041\041\041\000\000\000\000\000\
\\000"
),
 (42, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\049\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\043\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (43, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\044\000\000\000\000\000\000\000\
\\000"
),
 (44, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\045\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (45, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\046\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (46, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\047\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (47, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\048\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (49, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\050\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (50, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\051\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (51, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\052\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (52, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\053\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (53, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\048\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (57, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
\\058\058\058\058\058\058\058\058\058\058\000\000\000\000\000\000\
\\000\000\000\000\000\022\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\022\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (59, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
\\058\058\058\058\058\058\058\058\058\058\000\000\000\000\000\000\
\\000\000\000\000\000\022\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\022\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\060\033\000\000\000\000\000\000\000\
\\000"
),
 (60, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\063\063\063\063\063\063\063\063\063\063\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\061\000\000\000\000\000\000\000\
\\000"
),
 (61, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\062\062\062\062\062\062\062\062\062\062\000\000\000\000\000\000\
\\000\062\062\062\062\062\062\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\062\062\062\062\062\062\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (63, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\063\063\063\063\063\063\063\063\063\063\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (64, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\065\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (65, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\066\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (69, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\070\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (71, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\072\000\000\000\000\000\000\000\000\
\\072\072\072\072\072\072\072\072\072\072\000\000\000\000\000\000\
\\000\072\072\072\072\072\072\072\072\072\072\072\072\072\072\072\
\\072\072\072\072\072\072\072\072\072\072\072\000\000\000\000\072\
\\000\072\072\072\072\072\072\072\072\072\072\072\072\072\072\072\
\\072\072\072\072\072\072\072\072\072\072\072\000\000\000\000\000\
\\000"
),
 (74, 
"\000\000\000\000\000\000\000\000\000\075\075\000\075\075\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\075\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (76, 
"\077\077\077\077\077\077\077\077\077\077\000\077\077\077\077\077\
\\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\
\\077\077\000\077\077\077\077\077\077\077\077\077\077\077\077\077\
\\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\
\\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\
\\077\077\077\077\077\077\077\077\077\077\077\077\000\077\077\077\
\\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\
\\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\
\\077"
),
 (78, 
"\000\000\000\000\000\000\000\000\000\098\098\000\098\098\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\098\000\097\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\094\094\094\094\094\094\094\094\094\094\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\093\000\091\000\
\\000\090\089\000\000\000\088\000\000\000\000\000\000\000\087\000\
\\000\000\086\000\085\080\079\000\000\000\000\000\000\000\000\000\
\\000"
),
 (80, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\081\081\081\081\081\081\081\081\081\081\000\000\000\000\000\000\
\\000\081\081\081\081\081\081\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\081\081\081\081\081\081\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (81, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\082\082\082\082\082\082\082\082\082\082\000\000\000\000\000\000\
\\000\082\082\082\082\082\082\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\082\082\082\082\082\082\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (82, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\083\083\083\083\083\083\083\083\083\083\000\000\000\000\000\000\
\\000\083\083\083\083\083\083\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\083\083\083\083\083\083\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (83, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\084\084\084\084\084\084\084\084\084\084\000\000\000\000\000\000\
\\000\084\084\084\084\084\084\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\084\084\084\084\084\084\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (91, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\092\092\092\092\092\092\092\092\092\092\092\092\092\092\092\092\
\\092\092\092\092\092\092\092\092\092\092\092\092\092\092\092\092\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (94, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\095\095\095\095\095\095\095\095\095\095\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (95, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\096\096\096\096\096\096\096\096\096\096\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (98, 
"\000\000\000\000\000\000\000\000\000\098\098\000\098\098\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\098\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\099\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (103, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\104\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (105, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\106\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (110, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\112\000\
\\111\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (115, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\116\000\000\000\000\000\000\000\000\
\\116\116\116\116\116\116\116\116\116\116\000\000\000\000\000\000\
\\000\116\116\116\116\116\116\116\116\116\116\116\116\116\116\116\
\\116\116\116\116\116\116\116\116\116\116\116\000\000\000\000\116\
\\000\116\116\116\116\116\116\116\116\116\116\116\116\116\116\116\
\\116\116\116\116\116\116\116\116\116\116\116\000\000\000\000\000\
\\000"
),
 (118, 
"\000\000\000\000\000\000\000\000\000\119\119\000\119\119\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\119\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [(N 203)], trans = 3},
{fin = [(N 203)], trans = 3},
{fin = [], trans = 5},
{fin = [], trans = 5},
{fin = [], trans = 7},
{fin = [], trans = 7},
{fin = [], trans = 9},
{fin = [], trans = 9},
{fin = [(N 269)], trans = 0},
{fin = [(N 114),(N 144),(N 269)], trans = 12},
{fin = [(N 114),(N 144)], trans = 13},
{fin = [(N 114)], trans = 14},
{fin = [], trans = 15},
{fin = [(N 141)], trans = 16},
{fin = [(N 141)], trans = 17},
{fin = [], trans = 18},
{fin = [(N 141),(N 171)], trans = 19},
{fin = [(N 141),(N 171)], trans = 20},
{fin = [(N 80)], trans = 21},
{fin = [], trans = 22},
{fin = [], trans = 23},
{fin = [(N 71)], trans = 23},
{fin = [(N 71)], trans = 25},
{fin = [], trans = 26},
{fin = [(N 71)], trans = 27},
{fin = [], trans = 28},
{fin = [], trans = 29},
{fin = [(N 71)], trans = 29},
{fin = [(N 71)], trans = 31},
{fin = [(N 80)], trans = 32},
{fin = [], trans = 33},
{fin = [(N 86)], trans = 33},
{fin = [(N 39),(N 269)], trans = 0},
{fin = [(N 114),(N 144),(N 269)], trans = 13},
{fin = [(N 37),(N 269)], trans = 0},
{fin = [(N 23),(N 269)], trans = 38},
{fin = [(N 23)], trans = 38},
{fin = [(N 106),(N 114),(N 173),(N 269)], trans = 40},
{fin = [(N 106)], trans = 41},
{fin = [(N 45),(N 269)], trans = 42},
{fin = [], trans = 43},
{fin = [], trans = 44},
{fin = [], trans = 45},
{fin = [], trans = 46},
{fin = [], trans = 47},
{fin = [(N 23)], trans = 0},
{fin = [], trans = 49},
{fin = [], trans = 50},
{fin = [], trans = 51},
{fin = [], trans = 52},
{fin = [], trans = 53},
{fin = [(N 35),(N 269)], trans = 0},
{fin = [(N 33),(N 269)], trans = 0},
{fin = [(N 43),(N 269)], trans = 0},
{fin = [(N 73),(N 76),(N 269)], trans = 57},
{fin = [(N 76)], trans = 57},
{fin = [(N 73),(N 76),(N 269)], trans = 59},
{fin = [], trans = 60},
{fin = [], trans = 61},
{fin = [(N 94)], trans = 61},
{fin = [(N 94)], trans = 63},
{fin = [(N 269)], trans = 64},
{fin = [], trans = 65},
{fin = [(N 27)], trans = 0},
{fin = [(N 41),(N 269)], trans = 0},
{fin = [(N 31),(N 269)], trans = 0},
{fin = [(N 29),(N 269)], trans = 69},
{fin = [(N 111)], trans = 0},
{fin = [(N 100),(N 269)], trans = 71},
{fin = [(N 100)], trans = 71},
{fin = [(N 108),(N 269)], trans = 0},
{fin = [(N 2),(N 269)], trans = 74},
{fin = [(N 2)], trans = 74},
{fin = [(N 203),(N 269)], trans = 76},
{fin = [(N 203)], trans = 76},
{fin = [(N 257),(N 269)], trans = 78},
{fin = [(N 227)], trans = 0},
{fin = [], trans = 80},
{fin = [], trans = 81},
{fin = [], trans = 82},
{fin = [], trans = 83},
{fin = [(N 249)], trans = 0},
{fin = [(N 221)], trans = 0},
{fin = [(N 233)], trans = 0},
{fin = [(N 224)], trans = 0},
{fin = [(N 230)], trans = 0},
{fin = [(N 218)], trans = 0},
{fin = [(N 215)], trans = 0},
{fin = [], trans = 91},
{fin = [(N 237)], trans = 0},
{fin = [(N 255)], trans = 0},
{fin = [], trans = 94},
{fin = [], trans = 95},
{fin = [(N 242)], trans = 0},
{fin = [(N 252)], trans = 0},
{fin = [], trans = 98},
{fin = [(N 212)], trans = 0},
{fin = [(N 205),(N 269)], trans = 0},
{fin = [(N 207)], trans = 0},
{fin = [(N 265),(N 269)], trans = 0},
{fin = [(N 265),(N 269)], trans = 103},
{fin = [(N 263)], trans = 0},
{fin = [(N 265),(N 269)], trans = 105},
{fin = [(N 260)], trans = 0},
{fin = [(N 267)], trans = 0},
{fin = [(N 185),(N 269)], trans = 0},
{fin = [(N 183),(N 185),(N 269)], trans = 0},
{fin = [(N 181),(N 185),(N 269)], trans = 110},
{fin = [(N 176)], trans = 0},
{fin = [(N 179)], trans = 0},
{fin = [(N 187)], trans = 0},
{fin = [(N 201),(N 269)], trans = 0},
{fin = [(N 197),(N 201),(N 269)], trans = 115},
{fin = [(N 197)], trans = 115},
{fin = [(N 199),(N 201),(N 269)], trans = 0},
{fin = [(N 190),(N 201),(N 269)], trans = 118},
{fin = [(N 190)], trans = 118}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val AQ = STARTSTATE 9;
val C = STARTSTATE 5;
val INITIAL = STARTSTATE 1;
val Q = STARTSTATE 7;
val S = STARTSTATE 3;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

fun makeLexer yyinput =
let	val yygone0=1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex (yyarg as (arg: UserDeclarations.arg)) =
let fun continue() : Internal.result = 
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = substring(!yyb,i0,i-i0)
			     val yypos = i0+ !yygone
			fun REJECT() = action(i,acts::l)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  100 => let val yytext=yymktext() in shifting "TYVAR(...)";
			    token1(TYVAR, yytext, arg, yypos, yytext) end
| 106 => let val yytext=yymktext() in shifting "REGVAR(...)";
			    token1(REGVAR, yytext, arg, yypos, yytext) end
| 108 => (YYBEGIN S; LexUtils.clearString arg; continue())
| 111 => (YYBEGIN C; LexUtils.newComment arg; continue())
| 114 => let val yytext=yymktext() in if quotation() andalso has_quote yytext then REJECT()
                            else token_id(yytext,arg,yypos) end
| 141 => let val yytext=yymktext() in if quotation() andalso has_quote yytext then REJECT()
                            else token_qualid(yytext,arg,yypos) end
| 144 => let val yytext=yymktext() in token_id(yytext,arg,yypos) end
| 171 => let val yytext=yymktext() in token_qualid(yytext,arg,yypos) end
| 173 => let val yytext=yymktext() in (* a starting quote *)
                            YYBEGIN Q;
                            LexUtils.clearString arg;
                            token0 (BEGINQ,arg,yypos,yytext) end
| 176 => (LexUtils.addChars "`" arg; continue())
| 179 => (LexUtils.addChars "^" arg; continue())
| 181 => let val yytext=yymktext() in YYBEGIN AQ;
			    token1(OBJL, LexUtils.asString arg,
	                           arg, yypos, yytext)
			     end
| 183 => let val yytext=yymktext() in (* a closing quote *)
                            YYBEGIN INITIAL;
			    token1(ENDQ, LexUtils.asString arg,
	                           arg, yypos, yytext)
			     end
| 185 => let val yytext=yymktext() in LexUtils.addChars yytext arg; continue() end
| 187 => let val yytext=yymktext() in LexUtils.addChars yytext arg; continue() end
| 190 => (continue())
| 197 => let val yytext=yymktext() in YYBEGIN Q; LexUtils.clearString arg;
			    token1(AQID, yytext, arg, yypos, yytext) end
| 199 => let val yytext=yymktext() in YYBEGIN INITIAL;
			    LexUtils.parStackPush (ref 1) arg;
			    token0(LPAREN, arg, yypos, yytext)
			    end
| 2 => (continue())
| 201 => (error(arg, yypos, "bad character after antiquote");
			    continue())
| 203 => let val yytext=yymktext() in LexUtils.addChars yytext arg; continue() end
| 205 => let val yytext=yymktext() in YYBEGIN INITIAL;
			    shifting "STRING(...)";
			    token1(STRING, LexUtils.asString arg,
				   arg, yypos, yytext)
			    end
| 207 => let val yytext=yymktext() in error(arg, yypos, "unclosed string");
			    YYBEGIN INITIAL;
			    shifting "STRING(bad)";
			    token1(STRING, "", arg, yypos, yytext)
			    end
| 212 => (continue())
| 215 => (LexUtils.addChars (str(chr 7)) arg; continue())
| 218 => (LexUtils.addChars (str(chr 8)) arg; continue())
| 221 => (LexUtils.addChars "\t" arg; continue())
| 224 => (LexUtils.addChars "\n" arg; continue())
| 227 => (LexUtils.addChars (str(chr 11)) arg; continue())
| 23 => let val yytext=yymktext() in token_id(yytext,arg,yypos) end
| 230 => (LexUtils.addChars (str(chr 12)) arg; continue())
| 233 => (LexUtils.addChars (str(chr 13)) arg; continue())
| 237 => let val yytext=yymktext() in LexUtils.addControlChar yytext arg; continue() end
| 242 => let val yytext=yymktext() in addAsciiChar (arg, yypos, yytext); continue() end
| 249 => let val yytext=yymktext() in addUnicodeChar (arg, yypos, yytext); continue() end
| 252 => (LexUtils.addChars "\"" arg; continue())
| 255 => (LexUtils.addChars "\\" arg; continue())
| 257 => (error(arg, yypos, "illegal string escape");
			    continue()
			   )
| 260 => (LexUtils.incComment arg; continue())
| 263 => (case LexUtils.decComment arg
			      of 0 => (YYBEGIN INITIAL; continue())
			       | _ => continue()
			    )
| 265 => (continue())
| 267 => (continue())
| 269 => let val yytext=yymktext() in error(arg, yypos, "cannot lex \"" ^ yytext ^ "\"");
			    continue()
			    end
| 27 => let val yytext=yymktext() in token0(DOTDOTDOT, arg, yypos, yytext) end
| 29 => let val yytext=yymktext() in (if LexUtils.parStackIsEmpty arg then ()
			     else incr (LexUtils.parStackTop arg));
			    token0(LPAREN, arg, yypos, yytext)
			    end
| 31 => let val yytext=yymktext() in (if LexUtils.parStackIsEmpty arg then ()
			     else let val top = LexUtils.parStackTop arg
				  in if !top = 1 then (LexUtils.parStackPop arg;
						       LexUtils.clearString arg;
						       YYBEGIN Q)
				     else decr top
				  end);
			    token0(RPAREN, arg, yypos, yytext)
			    end
| 33 => let val yytext=yymktext() in token0(LBRACKET, arg, yypos, yytext) end
| 35 => let val yytext=yymktext() in token0(RBRACKET, arg, yypos, yytext) end
| 37 => let val yytext=yymktext() in token0(LBRACE, arg, yypos, yytext) end
| 39 => let val yytext=yymktext() in token0(RBRACE, arg, yypos, yytext) end
| 41 => let val yytext=yymktext() in token0(COMMA, arg, yypos, yytext) end
| 43 => let val yytext=yymktext() in token0(SEMICOLON, arg, yypos, yytext) end
| 45 => let val yytext=yymktext() in token0(UNDERBAR, arg, yypos, yytext) end
| 71 => let val yytext=yymktext() in shifting "REAL(...)";
			    token1(REAL, LexUtils.asReal yytext,
				   arg, yypos, yytext) end
| 73 => let val yytext=yymktext() in shifting "DIGIT(...)";
			    token1(DIGIT, LexUtils.asDigit yytext,
				   arg, yypos, yytext) end
| 76 => let val yytext=yymktext() in shifting "DECPOSINTEGER(...)";
			    token1(DECPOSINTEGER, LexUtils.asInteger yytext,
				   arg, yypos, yytext) end
| 80 => let val yytext=yymktext() in shifting "DECNEGINTEGER(...)";
			    token1(DECNEGINTEGER, LexUtils.asInteger yytext,
				   arg, yypos, yytext) end
| 86 => let val yytext=yymktext() in shifting "HEXINTEGER(...)";
			    token1(HEXINTEGER, LexUtils.asInteger yytext,
				   arg, yypos, yytext) end
| 94 => let val yytext=yymktext() in shifting "WORD(...)";
			    token1(WORD, LexUtils.asWord yytext,
				   arg, yypos, yytext) end
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof yyarg
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := !yygone+i0;
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
in continue end
  in lex
  end
end
